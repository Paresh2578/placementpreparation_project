@using Markdig
@model Dictionary<string, dynamic>;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor  



@{
  var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions() // Enables advanced Markdown features
            .Build();

     var query = HttpContextAccessor.HttpContext!.Request.Query;
     var activetopicId = query["topicId"]; // Retrieves the topicId from the query string
     var activeSubtopicId = query["subTopicId"]; // Retrieves the topicId from the query string

     var activeTopicTitle = "";
     var activeSubtopicTitle = "";
     var nextSubTopicId = "";
     var nextTopicId = "";

     var preSubTopicId = "";
    var preTopicId = "";
}

  <div class="course-read-main " style="">
    <!-- Loading -->
    <div id="model-loading" class="d-none">
       <partial name="_Loading_Dialong" />
    </div>
</div>

      <!-- ======= Sidebar ======= -->
    <aside id="sidebar" class="sidebar  " style="">
      <ul class="sidebar-nav" id="sidebar-nav">
        <li class="nav-heading">All Topics</li>
    
        @{
      
        bool setNextTopicId = false;
        int topicIdx = 0;
        foreach (var topic in (Newtonsoft.Json.Linq.JArray)Model["sidebar"])
              {
                bool isCurrentTopic =  activetopicId.ToString().Trim() == topic["topicId"]!.ToString().Trim() ? true : false;
                var subTopicList = ((Newtonsoft.Json.Linq.JArray)topic["subTopicList"]!).ToObject<List<Dictionary<string, dynamic>>>();

                if(setNextTopicId){
                  nextTopicId = topic["topicId"]!.ToString();
                }

                if(isCurrentTopic){
                  setNextTopicId = true;
                  preTopicId = topicIdx == 0 ? "" : ((Newtonsoft.Json.Linq.JArray)Model["sidebar"])[topicIdx-1]["topicId"]!.ToString();
                  activeTopicTitle = topic["topicName"]!.ToString();
                }else{
                  setNextTopicId = false;
                }
                

                <li  onclick='selectTopic("@(subTopicList!.Count == 0 ? topic["topicId"] : "")")' class="nav-item">
                  <a class="nav-link @(isCurrentTopic ? "" : "collapsed")" data-bs-target="#(@topic["topicId"])" data-bs-toggle="collapse" href="#">
                    <span>@topic["topicName"]</span>
                    <!--check if subTopic are avalible or not-->
                    @if (subTopicList.Count != 0)
                    {
                      <i class="bi bi-chevron-down ms-auto"></i>
                    }
                  </a>
                <ul id="(@topic["topicId"])" class="nav-content collapse  @(isCurrentTopic ? "show" : "")" data-bs-parent="#sidebar-nav">

                 <!--Sub Topics-->
                  @{
                      int index = 0;
                      bool setNextSubTopic=false;
                      foreach(var subTopic in subTopicList)
                      {
                        // set default active subTopic Id
                        activeSubtopicId = activeSubtopicId.ToString().Trim() == "" && index == 0 && isCurrentTopic ? subTopic["subTopicId"] : activeSubtopicId;
                        bool isCurrentSubTopic = activeSubtopicId == subTopic["subTopicId"] ? true :  false;

                        if(setNextSubTopic){
                          nextSubTopicId = subTopic["subTopicId"];
                        }

                        // change active topic title
                        if(isCurrentSubTopic){
                          activeTopicTitle = subTopic["subTopicName"];
                          setNextSubTopic = true;
                          preSubTopicId = index == 0 ? "" : subTopicList[index-1]["subTopicId"];
                          activeSubtopicTitle = subTopic["subTopicName"];
                        }else{
                          setNextSubTopic = false;
                        }

                        @* bool isCurrentSubTopic = activeSubtopicId == subTopic["subTopicId"] ? true : activeSubtopicId.ToString().Trim() == "" && index == 0 && isCurrentTopic? true : false; *@
                        <li onclick='selectSubTopic("@topic["topicId"]","@subTopic["subTopicId"]")'>
                          <a  class="@(isCurrentSubTopic ? "active":  "")">
                            <i class="bi bi-circle"></i><span>@subTopic["subTopicName"]</span>
                          </a>
                        </li>
                       index++;
                      }
                    }
              </ul>
               </li>
               <!-- End Forms Nav -->
          topicIdx++;
          }
        }
      </ul>

    </aside><!-- End Sidebar-->

 <!-- menu icon-->
    <span id="toggel-sidebar"  class="menu-icon ms-3" style="font-size: 40px;height: 5px;">
      <i class="bi bi-list"></i>
    </span>

 <!-- body Section -->
    <section id="features" class="features section shadow rounded rounded-4 me-2 ms-2" style="width: 100vw;padding-top: 40px;background-color: #fff;">
      <div class="">

        <!-- Tabs -->
        <div class="d-flex justify-content-center">

          <ul class="nav nav-tabs" data-aos="fade-up" data-aos-delay="100">
            <!-- documention tab -->
            <li class="nav-item">
              <a class="nav-link active show" data-bs-toggle="tab" data-bs-target="#features-tab-1">
                <h4>Documention</h4>
              </a>
            </li><!-- End tab documention -->

            <!-- MCq tab -->
            <li onclick='getMcqs("@activetopicId","@activeSubtopicId")' class="nav-item">
              <a class="nav-link" data-bs-toggle="tab" data-bs-target="#features-tab-2">
                <h4>Mcq</h4>
              </a><!-- End tab Mcq -->
            </li>

            <!-- Question tab -->
            <li onclick='getQuestions("@activetopicId","@activeSubtopicId")' class="nav-item">
              <a class="nav-link" data-bs-toggle="tab" data-bs-target="#features-tab-3">
                <h4>Question</h4>
              </a>
            </li><!-- End tab Question tab -->

          </ul>

        </div>

        <div class="tab-content "  data-aos="fade-up" data-aos-delay="200">
          <!-- Documention body -->
          <div class=" tab-pane container course-read-body fade  active show" id="features-tab-1">
            <div class="content-section">
              <div class="topic-title-main">
                <p class="title" >@(string.IsNullOrEmpty(activeSubtopicTitle) ? activeTopicTitle : activeSubtopicTitle)</p>
                <hr/>
              </div>

            <div class="content prose prose-sm sm:prose lg:prose-lg max-w-none">
              @if(string.IsNullOrEmpty(Model["documention"]["content"].ToString()))
              {
                <p class="text-center">No data available</p>
              }else{
                 @Html.Raw(Markdown.ToHtml(Model["documention"]["content"].ToString() , pipeline))
              }
             
            </div>
            </div>
          </div><!-- End documention body -->

          <!-- Mcq body -->
          <div  class="tab-pane course-read-body container fade" id="features-tab-2">
            <div class="topic-title-main" style="border-bottom: 2px green;">
                <p class="title" >@(string.IsNullOrEmpty(activeSubtopicTitle) ? activeTopicTitle : activeSubtopicTitle)</p>
                <hr/>
              </div>

            <div class="mcq-list-container gap-2">
               
            </div>
          </div><!-- End Mcq Body -->

          <!-- Question Body -->
          <div class="tab-pane fade course-read-body container" id="features-tab-3">
            <div class="topic-title-main" style="border-bottom: 2px green;">
                <p class="title" >@(string.IsNullOrEmpty(activeSubtopicTitle) ? activeTopicTitle : activeSubtopicTitle)</p>
                <hr/>
              </div>

            <div class="question-list-container gap-5">
               
            </div>
          </div><!-- End Question Body -->

             @* next ans prev button *@
        <div class="d-flex justify-content-between">
          <button class="btn btn-primary" onclick='selectSubTopic("@(string.IsNullOrEmpty(preTopicId) ? activetopicId : preTopicId)", "@(!string.IsNullOrEmpty(preTopicId) ?"" : string.IsNullOrEmpty(preSubTopicId) ? activeSubtopicId : preSubTopicId)")' @(string.IsNullOrEmpty(preTopicId?.Trim()) && string.IsNullOrEmpty(preSubTopicId?.Trim()) ? "disabled" : "")><i class="fa-solid fa-chevron-left"></i> Previous</button>
            <button class="btn btn-primary" onclick='selectSubTopic("@(nextSubTopicId.ToString().ToLower().Trim() == "" ? nextTopicId :  activetopicId)" , "@nextSubTopicId")'  @(string.IsNullOrEmpty(nextTopicId?.Trim()) && string.IsNullOrEmpty(nextSubTopicId?.Trim()) ? "disabled" : "")> Next <i class="fa-solid fa-chevron-right"></i></button>
          </div>

        </div>

      </div>

    </section><!-- /Features Section -->

  <!-- body -->
  @* <div class="course-read-body container">
    <div class="topic-title-main">
        <p class="title" style="">Java Introduction</p>
    </div>

      <div class="prose prose-sm sm:prose lg:prose-lg max-w-none">
        @Html.Raw(ViewData["Content"] as string)
    </div>
  </div> *@
  </div>


@section Scripts{
  
  <!-- side bar -->
  <script>
    document.getElementById('toggel-sidebar').addEventListener('click', function(){
    

      let sidebar = document.getElementById('sidebar');
      sidebar.classList.toggle('sidebar-toggel');


      if(sidebar.classList.contains('sidebar-toggel')){
        document.getElementById('toggel-sidebar').style.position = "relative";
      }

      const width = window.innerWidth;

      if(width <= 800){

        if(sidebar.classList.contains('sidebar-toggel')){
          document.getElementById('features').style.display = "none";
        }else{
           document.getElementById('features').style.display = "block";
        }

        //add Sidebar toggel class
         @* sidebar.classList.add('sidebar-toggel'); *@
      }

      // if apply toggel-sidebar-sidebar position Technology remove else apply
      
    });
  </script>

  <!-- mcq answer -->
  <script>
   

    function togelShowAnswer(e,mcqId){
      const answer = e.nextElementSibling;
      const mcqOptionSection = document.getElementById('mcq-option-section'+mcqId);

      // <!-- set color in options --> 
      for(var children of mcqOptionSection.children){
        if(children.getAttribute('value') == "true"){
          children.classList.add('true');
          }else{
          children.classList.remove('false');
          children.classList.remove('true');
          }
      }

      // Hide and show Answer
      answer.classList.toggle('show');
      if(answer.classList.contains('show')){
        e.innerHTML = "Hide Answer";
        answer.classList.remove('d-none');
      }else{
        e.innerHTML = "Show Answer";
        answer.classList.add('d-none');
      // <!-- hide right answer when click hide answer -->
        hideRightOption(mcqOptionSection);
      }
      
    }
    function hideRightOption(mcqOptionSection){
      
      for(var children of mcqOptionSection.children){
          children.classList.remove('true');
          children.classList.remove('false');
       
    }
    }


    @* <!-- click mcq options --> *@
    function clickMcqOption(e,mcqId){
       const mcqOptionSection = document.getElementById('mcq-option-section'+mcqId);
      for(var children of mcqOptionSection.children){
        children.classList.remove('true');
        children.classList.remove('false');
      }

      if(e.getAttribute('value') == "true"){
        e.classList.add('true');
      }else{
        e.classList.add('false');
      }


    }
  </script>

  <!-- Sidebar selection -->
  <script>
    function selectSubTopic(topicId,subTopicId){
      const url = new URL(window.location.href);
      url.searchParams.set('topicId', topicId);
      url.searchParams.set('subTopicId', subTopicId);
      window.location.href = url;
    }

    function selectTopic(topicId){
      //check if topicId is empty then return
      if(topicId.toString().trim() == "") return;
      const url = new URL(window.location.href);
      url.searchParams.set("topicId" , topicId);
      url.searchParams.set("subTopicId" , "");
      window.location.href = url;
    }
  </script>

  <!-- content get and show -->
   <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

   <!-- Mcq -->
  <script>
     const modelLoading = document.getElementById('model-loading');
     // Initialize Showdown Converter
    var converter = new showdown.Converter({
      tables: true,
      strikethrough: true,
      tasklists: true,
      simplifiedAutoLink: true,
      ghCodeBlocks: true,
    });

   

    async  function getMcqs(topicId , subTopicId){
       // show loading
       modelLoading.classList.remove('d-none');

      let mcqList = []
      // fetch mcq data from database
        try {
            // Fetch MCQ data from the database using AJAX
            mcqList = await $.ajax({
                url: `/Mcq/GetMcqs`,
                type: "GET",
                data: {
                    topicId: topicId,
                    subTopicId: subTopicId
                }
            });
       @*
         *@
        } catch (err) {
            console.error("Error fetching MCQs:", err);
            return; // Exit if there was an error
        }

      // Find the container
     const mcqContainer = document.querySelector(".mcq-list-container");

     // Clear existing content
      mcqContainer.innerHTML = "";

      // Loop over the mcqList
      mcqList.forEach((mcq , index) => {
        // Convert Markdown to HTML
        var html = converter.makeHtml(mcq.questionText);
         const mcqHtml =`
              <div class="mcq">
                @* <h4 >Q${index+1}.  ${html} ?</h4> *@
                <h4 >Q${index+1}.  ${mcq.questionText} ?</h4>
                <div id="mcq-option-section${mcq.mcqId}" class="mcq-option-section">
                    <div class="mcq-option" value="${mcq.correctAnswer.toLocaleLowerCase().trim() =="a" }" onclick='clickMcqOption(this,"${mcq.mcqId.toString()}")'>A . ${mcq.optionA}</div>
                    <div class="mcq-option" value="${mcq.correctAnswer.toLocaleLowerCase().trim() =="b" }" onclick='clickMcqOption(this,"${mcq.mcqId}")'>B . ${mcq.optionB}</div>
                    <div class=" mcq-option" value="${mcq.correctAnswer.toLocaleLowerCase().trim() =="c" }" onclick='clickMcqOption(this,"${mcq.mcqId}")'>C . ${mcq.optionC}</div>
                    <div class="mcq-option" value="${mcq.correctAnswer.toLocaleLowerCase().trim() =="d" }" onclick='clickMcqOption(this,"${mcq.mcqId}")'>D . ${mcq.optionD}</div>
                </div>

                <!-- answer -->
                <div class="mcq-answer">
                  <button class="ans-toggel-btn" onclick='togelShowAnswer(this,"${mcq.mcqId.toString()}")'>Show Answer</button>
                  <div class="mcq-ans-discription d-none">
                    <p>Answer : ${mcq.correctAnswer.toLocaleLowerCase() == 'a' ? mcq.optionA : mcq.correctAnswer.toLocaleLowerCase() == 'b' ? mcq.optionB : mcq.correctAnswer.toLocaleLowerCase() == 'c' ? mcq.optionC : mcq.optionD }</p>
                    <span class="fw-bold">Explanation</span>
                    <div class="p-2 " style="border-style: dotted; border-color: gray;">
                      ${mcq.answerDescription}
                    </div>
                  </div>
                </div>
              </div>
         `;

        // Append the mcqHtml to the mcqContainer
        mcqContainer.innerHTML += mcqHtml;
      
      });

      // if mcq data are not avalible then show text
      if(mcqList.length == 0){
        mcqContainer.innerHTML += `<p class="text-center">No data available</p>`
      }

      // hide loading
      modelLoading.classList.add('d-none');
    }
     // Apply Syntax Highlighting
    document.querySelectorAll('pre code').forEach((block) => {
      hljs.highlightElement(block);
    });

    
  </script>

  <!-- Questions -->
  <script>
    @* const modelLoading = document.getElementById('model-loading'); *@

    async function getQuestions(topicId , subTopicId){
      // show loading
      modelLoading.classList.remove('d-none');

       let questionList = []
      // fetch question data from database
        try {
            // Fetch Question data from the database using AJAX
            questionList = await $.ajax({
                url: `/Question/GetQuestions`,
                type: "GET",
                data: {
                    topicId: topicId,
                    subTopicId: subTopicId
                }
            });
        } catch (err) {
            console.error("Error fetching Question:", err);
            return; // Exit if there was an error
        }

      // Find the container
     const questionContainer = document.querySelector(".question-list-container");

      // Clear existing content
      questionContainer.innerHTML= "";
      // Loop over the questionList
      questionList.forEach((question, index)=>{
        const questionHtml =`
                <div class="question">
                  <h4>Q${index+1}. ${question.question} ?</h4>
                  <span class="fw-bold">Answer :</span>
                  <div>
                    <p>${question.questionAnswer}</p>
                  </div>
               </div>
        `

        //add
        questionContainer.innerHTML += questionHtml; 

        
      })

       // if quesiton data are not avalible then show text
      if(questionList.length == 0){
        questionContainer.innerHTML += `<p class="text-center">No data available</p>`
      }

      //# hide loading
        modelLoading.classList.add('d-none');

    }
  </script>



  <!-- loading -->
  <script>
    $(function(){
  $('#modal-loading').modal('show');
});
  </script>
}  