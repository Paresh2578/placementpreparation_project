@model List<QuestionModel>;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor  

@{
    ViewData["Title"] = "Question List";
    var query = HttpContextAccessor.HttpContext!.Request.Query;
}

<!-- Page Title -->
<div class="page-title light-background">
    <div class="course">
        <h1>@(query["courseName"]) Questions</h1>
        <nav class="breadcrumbs">
            <ol>
                <li><a asp-controller="Home" asp-action="Home">Home</a></li>
                <li><a asp-controller="Mcq" asp-action="ListAllCourses">Courses</a></li>
                <li class="current">Quesitons</li>
            </ol>
        </nav>
    </div>
</div><!-- End Page Title -->


<!-- Topic   Section -->
<section id="courses-section " class=" container courses-section section">
    <!-- Section Title -->
      <div class="container section-title p-0" data-aos="fade-up">
        <h2>All Questions</h2>
      </div><!-- End Section Title -->  

    <!-- mcq list -->
    <div data-aos="fade-up">
      @{
        int index = 1;
    foreach(QuestionModel question in Model){
         <div class="mcq shadow p-3 mb-5 bg-white rounded" id="mcq@(question.Question)" >
                 <div class="question">
                  <h4>Q@(index). @(question.Question) ?</h4>
                  <span class="fw-bold">Answer :</span>
                  <div>
                    <p>@(question.QuestionAnswer)</p>
                  </div>
               </div>
              </div>
              index++;
    }     
    }
    </div>

</section>

@section Scripts{
      <!-- mcq answer -->
  <script>
   

    function togelShowAnswer(e,mcqId){
      const answer = e.nextElementSibling;
      const mcqOptionSection = document.getElementById('mcq-option-section'+mcqId);

      // <!-- set color in options --> 
      for(var children of mcqOptionSection.children){
        if(children.dataset.value == "True"){
          children.classList.add('true');
          }else{
          children.classList.remove('false');
          children.classList.remove('true');
          }
      }

      // Hide and show Answer
      answer.classList.toggle('show');
      if(answer.classList.contains('show')){
        e.innerHTML = "Hide Answer";
        answer.classList.remove('d-none');
      }else{
        e.innerHTML = "Show Answer";
        answer.classList.add('d-none');
      // <!-- hide right answer when click hide answer -->
        hideRightOption(mcqOptionSection);
      }
      
    }
    function hideRightOption(mcqOptionSection){
      
      for(var children of mcqOptionSection.children){
          children.classList.remove('true');
          children.classList.remove('false');
       
    }
    }


    @* <!-- click mcq options --> *@
    function clickMcqOption(e,mcqId){
       const mcqOptionSection = document.getElementById('mcq-option-section'+mcqId);
       console.log(mcqOptionSection);
      for(var children of mcqOptionSection.children){
        children.classList.remove('true');
        children.classList.remove('false');
      }

      if(e.dataset.value == "True"){
        e.classList.add('true');
      }else{
        e.classList.add('false');
      }


    }
  </script>
}