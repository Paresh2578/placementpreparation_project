@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using Markdig;
@model IPagedList<QuestionModel>
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor  

@{
    ViewData["Title"] = "Question List";
    var query = HttpContextAccessor.HttpContext!.Request.Query;

    string? companyName = query["companyName"];
    string? techStack = query["techStack"];
    string? courseId = query["courseId"];


      
  var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions() // Enables advanced Markdown features
             .UseMathematics() // Enable math support
            .Build();
}

<!-- Page Title -->
<div class="page-title light-background">
    <div class="course">
        <h1>@(query["courseName"])</h1>
        <nav class="breadcrumbs">
            <ol>
                <li><a asp-controller="Home" asp-action="Home">Home</a></li>
                @if(query["courseName"] != "Interview Questions")
                {
                    <li><a asp-controller="Mcq" asp-action="ListAllCourses">Courses</a></li>
                <li class="current">Quesitons</li>
                }
                else
                {
                    <li class="current">Interview Questions</li>
                }
            </ol>
        </nav>
    </div>
</div><!-- End Page Title -->


<!-- Topic   Section -->
<section id="courses-section " class=" container courses-section section">
    <!-- Section Title -->
      <div class="container section-title p-0" data-aos="fade-up">
        <h2>All Questions</h2>
      </div><!-- End Section Title -->  


      <!-- Filtter  -->
      @if(string.IsNullOrEmpty(query["courseId"])){
        <div data-aos="fade-up" class="container mb-3">
        <div class="row">
          <div class="col-md-12">
            <div class="filter-container">
                <!-- companyName dropDrown -->
              <div class="filter shadow-sm ">
                <select  name="company" id="company" class="form-select" 
                    onchange="window.location.href='QuestionList?courseName=Interview Questions&companyName=' + this.value + '&techStack=@(techStack ?? "")';">
                        @foreach (var item in (List<SelectListItem>)ViewBag.companyNames)
                        {
                            <option value="@item.Value" selected="@(item.Value == companyName)">
                                @item.Text
                            </option>
                        }
                </select>
              </div>
              <!-- tech-stack dropDrown -->
              <div class="filter shadow-sm ">
                <select name="tech-stack" id="tech-stack" class="form-select"
                    onchange="window.location.href='QuestionList?courseName=Interview Questions&techStack=' + this.value + '&companyName=@(companyName ?? "")';">
                        @foreach (var item in (List<SelectListItem>)ViewBag.techStacks)
                        {
                            <option value="@item.Value" selected="@(item.Value == techStack)">
                                @item.Text
                            </option>
                 }
            </select>
             </div>
            </div>
        </div>
    </div>
            </div>
      }
            <!-- End Filtter  -->

    <!-- mcq list -->
    @{
        int index =  (Model.PageNumber - 1) * Model.PageSize + 1;
    foreach(QuestionModel question in Model){
         <div data-aos="fade-up" class=" shadow question-card-container bg-white rounded" >
                 <div class="question">
                  <div>
                    <h4 style="padding: 0px; margin: 0px;">@(Html.Raw(Markdown.ToHtml("Q"+(index)+". "+question.Question)))</h4>
                    <div class="tags" style="">
                       @if(question.CompanyName != null){ <span class="tag company">@question.CompanyName</span>}
                       @if(question.TechStack != null){ <span class="tag tech-stack">@question.TechStack</span>}
                    </div>
                  </div>
                  <span class="fw-bold">Answer :</span>
                  <div>
                    <p>@(Html.Raw(Markdown.ToHtml(question.QuestionAnswer)))</p>
                  </div>
               </div>
              </div>
              index++;
      }  
      // not found
       if(Model.Count == 0){
          <h3 class="text-center mt-4" data-aos="fade-up">No Question Found</h3>
       }   
    }

   <!-- Pagination -->
    <div class="pagination-container mt-4 text-center">
        @Html.PagedListPager(
            Model,
            page => Url.Action("QuestionList", new { pageNumber = page,courseId = courseId }),
            new PagedListRenderOptions
            {
                DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                DisplayLinkToLastPage = PagedListDisplayMode.Always,
                DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                DisplayLinkToNextPage = PagedListDisplayMode.Always,
                MaximumPageNumbersToDisplay = 5,
                DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                UlElementClasses = new List<string> { "pagination" },
                LiElementClasses = new List<string> { "page-item" },
                PageClasses = new List<string> { "page-link" }
            }
        )
    </div>
    <!-- End Pagination -->
</section>

@section Scripts{
  
}