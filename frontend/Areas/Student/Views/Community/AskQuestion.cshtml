@using Placement_Preparation.BAL
@model PostModel;
@{
    ViewData["Title"] = "Community - Ask Question";
}


<!-- Question Section -->
<section id="question-section" class="container community-container section" style="display: flex; justify-content: center; align-items: center;">
    <div class="form-container">
        <div class="form-header">
            <h1 class="form-title">Ask a Question</h1>
            <p class="form-subtitle">Get help from our community of developers and experts</p>
        </div>

        <div class="success-message" id="successMessage">
            <strong>Success!</strong> Your question has been posted successfully.
        </div>

        <div class="form-tips">
            <div class="tips-title">
                <span>ðŸ’¡</span> Tips for a great question
            </div>
            <ul class="tips-list">
                <li>Write a clear, specific title that summarizes your problem</li>
                <li>Provide detailed context and what you've already tried</li>
                <li>Include relevant code, error messages, or examples</li>
                <li>Be respectful and follow community guidelines</li>
            </ul>
        </div>

        <form id="questionForm" method="post" class="add-question-form" asp-action="AskQuestion" asp-controller="Community">
            <!-- Hidden Fields -->
            <input type="hidden" name="PostId"/>
            <input type="hidden" name="UserId" value="@CV.GetId()"/>

            <!-- show errors -->
            @if(ViewData["InternalServerError"] != null){
                <div class="error-banner-message">
                    <strong>Error:</strong> @ViewData["InternalServerError"]
                </div>
            }
            <!-- Title Field -->
            <div class="form-group floating-label">
                <input 
                    type="text" 
                    id="title" 
                    name="title" 
                    class="form-input" 
                    placeholder=" "
                    maxlength="150"
                    asp-for="Title"
                >
                <label for="title" class="form-label">Question Title</label>
                <div class="char-counter" id="titleCounter">0/150</div>
                <span asp-validation-for="Title" class="error-message" id="titleError"/>
            </div>

            <!-- Description Field -->
            <div class="form-group">
                <textarea 
                    id="description" 
                    name="description" 
                    class="form-textarea" 
                    placeholder="Write your answer Describe here... You can use Markdown formatting."
                    maxlength="5000"
                    asp-for="Description"
                ></textarea>
                <span asp-validation-for="Description" class="error-message" id="descriptionError"></span>
            </div>

            <!-- Form Actions -->
            <div class="add-question-form-actions">
                <button type="submit" class="question-submit-btn" id="submitBtn">
                    <span class="btn-text">Post Your Question</span>
                </button>
                <button type="button" class="question-cancel-btn" id="cancelBtn">
                    Cancel
                </button>
            </div>
        </form>
    </div>

</section>


@section Scripts{
    
    <script src="~/lib/jquery/jquery.min.js"></script>
     @* post answer *@
    <script>
        const easymde = new EasyMDE({
            element: document.getElementById('description'),
        });
    </script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('questionForm');
            const titleInput = document.getElementById('title');
            const descriptionInput = document.getElementById('description');
            const submitBtn = document.getElementById('submitBtn');
            const cancelBtn = document.getElementById('cancelBtn');
            const successMessage = document.getElementById('successMessage');

            // Character counters
            const titleCounter = document.getElementById('titleCounter');
            const descriptionCounter = document.getElementById('descriptionCounter');

            // Error messages
            const titleError = document.getElementById('titleError');
            const descriptionError = document.getElementById('descriptionError');

            // Update character counters
            function updateCharCounter(input, counter, maxLength) {
                const currentLength = input.value.length;
                counter.textContent = `${currentLength}/${maxLength}`;
                
                // Update counter color based on usage
                counter.classList.remove('warning', 'danger');
                if (currentLength > maxLength * 0.8) {
                    counter.classList.add('warning');
                }
                if (currentLength > maxLength * 0.95) {
                    counter.classList.add('danger');
                }
            }

            // Title input handlers
            titleInput.addEventListener('input', function() {
                updateCharCounter(this, titleCounter, 150);
                clearError(titleError);
            });
            
            // Enhanced accessibility
            titleInput.addEventListener('focus', function() {
                this.setAttribute('aria-describedby', 'titleCounter titleError');
            });

            descriptionInput.addEventListener('focus', function() {
                this.setAttribute('aria-describedby', 'descriptionCounter descriptionError');
            });
        });
    </script>
}